from fastapi import FastAPI
from pydantic import BaseModel
from typing import List, Optional
import json
import os
import re
import MetaTrader5 as mt5

app = FastAPI()

# Dummy client registry
CLIENTS = [
    {"login": 89647215, "name": "Main Account", "plan": "30-day", "password": "R@lq8kAP", "server": "MetaQuotes-Demo"},
    {"login": 89647216, "name": "LongTerm Client", "plan": "6-month", "password": "examplePass", "server": "MetaQuotes-Demo"},
]

GROWTH_PLANS = {
    "30-day": {"starting_balance": 10.0, "target_multiplier": 1.27},
    "6-month": {"starting_balance": 1.0, "target_multiplier": 1.06}
}

class SignalRequest(BaseModel):
    raw_signal: str

@app.post("/parse-signal")
def parse_signal(signal: SignalRequest):
    raw = signal.raw_signal
    result = {
        "symbol": None,
        "action": None,
        "volume": 0.01,
        "sl": None,
        "tp": None
    }
    try:
        # Basic flexible extraction
        symbol_match = re.search(r"[A-Z]{6,7}", raw)
        action_match = re.search(r"\\b(BUY|SELL)\\b", raw, re.IGNORECASE)
        sl_match = re.search(r"SL[:\\-]?\\s*(\\d+(\\.\\d+)?)", raw, re.IGNORECASE)
        tp_match = re.search(r"TP[:\\-]?\\s*(\\d+(\\.\\d+)?)", raw, re.IGNORECASE)
        lot_match = re.search(r"Lot[:\\-]?\\s*(\\d+(\\.\\d+)?)", raw, re.IGNORECASE)

        if symbol_match:
            result["symbol"] = symbol_match.group(0).upper()
        if action_match:
            result["action"] = action_match.group(0).upper()
        if sl_match:
            result["sl"] = float(sl_match.group(1))
        if tp_match:
            result["tp"] = float(tp_match.group(1))
        if lot_match:
            result["volume"] = float(lot_match.group(1))

        # Fallbacks if SL/TP come without prefix
        if not result["sl"] or not result["tp"]:
            numbers = list(map(float, re.findall(r"\\d+\\.\\d+", raw)))
            if len(numbers) >= 2:
                result["sl"] = result["sl"] or numbers[0]
                result["tp"] = result["tp"] or numbers[1]

        # Validation
        if None in (result["symbol"], result["action"], result["sl"], result["tp"]):
            return {"error": "Could not parse full signal. Provide symbol, action, SL, and TP."}

        return result
    except Exception as e:
        return {"error": f"Parsing failed: {str(e)}"}
