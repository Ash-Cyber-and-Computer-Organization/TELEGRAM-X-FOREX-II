// lib/main.dart
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

void main() {
  runApp(AlgoBankApp());
}

class AlgoBankApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'AlgoBank Dashboard',
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: Color(0xFF0D0D0D),
        colorScheme: ColorScheme.dark(
          primary: Colors.purple.shade400,
          secondary: Colors.amber.shade400,
          surface: Colors.blue.shade900,
        ),
        textTheme: TextTheme(
          headline6: TextStyle(color: Colors.amber, fontWeight: FontWeight.bold),
          bodyText2: TextStyle(color: Colors.white70),
        ),
      ),
      home: LoginScreen(),
    );
  }
}

final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

Future<void> showNotification(String title, String body) async {
  const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
    'channel_id', 'channel_name',
    importance: Importance.max,
    priority: Priority.high,
    color: Colors.purple,
  );
  const NotificationDetails platformDetails = NotificationDetails(android: androidDetails);
  await flutterLocalNotificationsPlugin.show(0, title, body, platformDetails);
}

class ClientDetailScreen extends StatefulWidget {
  final int login;
  ClientDetailScreen({required this.login});

  @override
  _ClientDetailScreenState createState() => _ClientDetailScreenState();
}

class _ClientDetailScreenState extends State<ClientDetailScreen> {
  Map<String, dynamic> history = {};

  Future<void> fetchHistory() async {
    final response = await http.get(Uri.parse('http://YOUR_FASTAPI_HOST/client/${widget.login}/history'));
    if (response.statusCode == 200) {
      setState(() {
        history = json.decode(response.body);
      });
      showNotification('ðŸ“ˆ Equity Updated', 'Latest equity for ${widget.login} has been fetched.');
    }
  }

  @override
  void initState() {
    super.initState();
    fetchHistory();
  }

  List<FlSpot> getChartData() {
    List<FlSpot> spots = [];
    int i = 0;
    history.forEach((key, value) {
      spots.add(FlSpot(i.toDouble(), value.toDouble()));
      i++;
    });
    return spots;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('ðŸ“ˆ Client History'), backgroundColor: Colors.purple.shade700),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: history.isEmpty
            ? Center(child: CircularProgressIndicator())
            : Column(
                children: [
                  SizedBox(
                    height: 200,
                    child: LineChart(
                      LineChartData(
                        titlesData: FlTitlesData(show: false),
                        borderData: FlBorderData(show: false),
                        lineBarsData: [
                          LineChartBarData(
                            isCurved: true,
                            color: Colors.amber,
                            dotData: FlDotData(show: false),
                            spots: getChartData(),
                          )
                        ],
                      ),
                    ),
                  ),
                  SizedBox(height: 20),
                  Expanded(
                    child: ListView(
                      children: history.entries.map((entry) => ListTile(
                            title: Text('ðŸ“… ${entry.key}'),
                            trailing: Text('Equity: \$${entry.value.toStringAsFixed(2)}'),
                          )).toList(),
                    ),
                  )
                ],
              ),
      ),
    );
  }
}
